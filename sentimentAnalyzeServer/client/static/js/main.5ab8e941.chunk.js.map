{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","emotionstomap","this","props","emotions","mappingemotions","Object","keys","map","ems","console","log","className","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","analysisresult","data","senti","output","style","color","fontSize","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5ab8e941.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./bootstrap.min.css\";\n\nclass EmotionTable extends React.Component {\n  render() {\n    const emotionstomap = this.props.emotions;\n    const mappingemotions = Object.keys(emotionstomap).map((ems) => {\n      console.log(ems);\n      return (\n        <>\n          <tr>\n            <td>{ems}</td>\n            <td>{emotionstomap[ems]}</td>\n          </tr>\n        </>\n      );\n    });\n    return (\n      <div>\n        <table className=\"table table-bordered\">\n          <tbody>{mappingemotions}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\nexport default EmotionTable;\n","import \"./bootstrap.min.css\";\nimport \"./App.css\";\nimport EmotionTable from \"./EmotionTable.js\";\nimport React from \"react\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n    mode: \"text\",\n    sentimentOutput: [],\n    sentiment: true,\n  };\n\n  renderTextArea = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"url\") {\n      this.setState({\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true,\n      });\n    }\n  };\n\n  renderTextBox = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"text\") {\n      this.setState({\n        innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n        mode: \"url\",\n        sentimentOutput: [],\n        sentiment: true,\n      });\n    }\n  };\n\n  sendForSentimentAnalysis = () => {\n    this.setState({ sentiment: true });\n    let ret = \"\";\n    let url = \".\";\n\n    if (this.state.mode === \"url\") {\n      url =\n        url +\n        \"/url/sentiment?url=\" +\n        document.getElementById(\"textinput\").value;\n    } else {\n      url =\n        url +\n        \"/text/sentiment?text=\" +\n        document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response) => {\n      //Include code here to check the sentiment and format the data accordingly\n      const analysisresult = response.data.senti;\n      this.setState({ sentimentOutput: analysisresult });\n      console.log(analysisresult === \"positive\");\n      let output = \"The sentiment of the given Input is \" + analysisresult;\n      if (analysisresult === \"positive\") {\n        output = (\n          <div style={{ color: \"green\", fontSize: 20 }}>\n            The sentiment of the given Input is {analysisresult}\n          </div>\n        );\n      } else if (analysisresult === \"negative\") {\n        output = (\n          <div style={{ color: \"red\", fontSize: 20 }}>\n            The sentiment of the given Input is {analysisresult}\n          </div>\n        );\n      } else {\n        output = (\n          <div style={{ color: \"yellow\", fontSize: 20 }}>\n            The sentiment of the given Input is {analysisresult}\n          </div>\n        );\n      }\n      this.setState({ sentimentOutput: output });\n    });\n  };\n\n  sendForEmotionAnalysis = () => {\n    this.setState({ sentiment: false });\n    let ret = \"\";\n    let url = \".\";\n    if (this.state.mode === \"url\") {\n      url =\n        url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url =\n        url +\n        \"/text/emotion/?text=\" +\n        document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n\n    ret.then((response) => {\n      console.log(response.data.emotions);\n      this.setState({\n        sentimentOutput: <EmotionTable emotions={response.data.emotions} />,\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>\n          Text\n        </button>\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>\n          URL\n        </button>\n        <br />\n        <br />\n        {this.state.innercomp}\n        <br />\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>\n          Analyze Sentiment\n        </button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>\n          Analyze Emotion\n        </button>\n        <br />\n        {this.state.sentimentOutput}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}